/*
 * data.h
 *
 *  Created on: Jun 15, 2020
 *      Author: Alex
 */
#ifndef DATA_H_
#define DATA_H_
//#define SLAVE_BUFF_SIZE 128

#define PROGRAM_NAME "16inpind"

#define INPUT16_HW_I2C_BASE_ADD	0x20

#define HW_MAJOR	3
#define HW_MINOR	0
#define FW_MAJOR	1
#define FW_MINOR	1

#define MIN_CH_NO 1
#define OPTO_CH_NO 16

#define COUNTER_SIZE 4
#define OPTO_ENC_CH_NO 8
#define SCAN_FREQ_SIZE 2
#define PWM_IN_FILL_SIZE 2
#define IN_FREQENCY_SIZE 2
#define OPTO_FREQUENCY_DATA_SIZE 2
#define OPTO_FILL_FACTOR_SCALE 100
#define LED_CH_NO 16

#define WDT_RESET_SIGNATURE     0xca
#define WDT_RESET_COUNT_SIGNATURE    0xbe

#define VOLT_TO_MILIVOLT 1000
#define MILIAMPER_TO_MICROAMPER 1000

enum
{
	CALIB_IN_PROGRESS = 0,
	CALIB_DONE,
	CALIB_ERROR,
};

enum
{
	INPUTS16_INPORT_REG_ADD,
	INPUTS16_OUTPORT_REG_ADD = 2,
	INPUTS16_POLINV_REG_ADD = 4,
	INPUTS16_CFG_REG_ADD = 6, // retro compatibility with the I/OExpander version
	I2C_MEM_OPTO_IN_ADD = 8,
	I2C_MEM_OPTO = I2C_MEM_OPTO_IN_ADD,
	I2C_MEM_OPTO_IN_ADD1,
	I2C_MEM_OPTO_IN_AC,
	I2C_MEM_OPTO_IN_AC1,
	I2C_MEM_LED_VAL,
	I2C_MEM_LEDS = I2C_MEM_LED_VAL,
	I2C_MEM_LED_VAL1,
	I2C_MEM_LED_SET,
	I2C_MEM_LED_CLR,
	I2C_MEM_LED_MODE, //0-auto, 1 - manual;
	I2C_MEM_LED_MODE1, //0-auto, 1 - manual;
	I2C_MEM_OPTO_IT_RISING_ADD,
	I2C_MEM_OPTO_IT_RISING_ADD1,
	I2C_MEM_OPTO_IT_FALLING_ADD,
	I2C_MEM_OPTO_IT_FALLING_ADD1,
	I2C_MEM_OPTO_CNT_RST_ADD,
	I2C_MEM_OPTO_ENC_ENABLE_ADD,
	I2C_MEM_OPTO_ENC_CNT_RST_ADD,
	I2C_MEM_OPTO_EDGE_COUNT_ADD,
	I2C_MEM_OPTO_EDGE_COUNT_END_ADD = I2C_MEM_OPTO_EDGE_COUNT_ADD
		+ COUNTER_SIZE * OPTO_CH_NO - 1,
	I2C_MEM_OPTO_ENC_COUNT_ADD,
	I2C_MEM_OPTO_ENC_COUNT_END_ADD = I2C_MEM_OPTO_ENC_COUNT_ADD
		+ COUNTER_SIZE * OPTO_CH_NO / 2 - 1,
	I2C_MEM_PWM_IN_FILL,
	I2C_MODBUS_SETINGS_ADD = I2C_MEM_PWM_IN_FILL
		+ (OPTO_CH_NO * PWM_IN_FILL_SIZE),
	I2C_MBS1,
	I2C_MBS2,
	I2C_MBS3,
	I2C_MEM_DIAG_3V3_MV_ADD,
	I2C_MEM_DIAG_TEMPERATURE_ADD = I2C_MEM_DIAG_3V3_MV_ADD + 2,
	I2C_MEM_DIAG_5V_ADD,
	I2C_MEM_PWR_LED_MODE = I2C_MEM_DIAG_5V_ADD + 2,

	I2C_MEM_ADD_RESERVED = 0xaa,
	I2C_MEM_IN_FREQENCY,
	I2C_MEM_IN_FREQENCY_END = I2C_MEM_IN_FREQENCY
		+ (OPTO_CH_NO * IN_FREQENCY_SIZE) - 1,
	I2C_MEM_WDT_RESET_ADD = I2C_MEM_IN_FREQENCY_END,
	I2C_MEM_WDT_INTERVAL_SET_ADD,
	I2C_MEM_WDT_INTERVAL_GET_ADD = I2C_MEM_WDT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_SET_ADD = I2C_MEM_WDT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_GET_ADD = I2C_MEM_WDT_INIT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_RESET_COUNT_ADD = I2C_MEM_WDT_INIT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_CLEAR_RESET_COUNT_ADD = I2C_MEM_WDT_RESET_COUNT_ADD + 2,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD
		+ 4,
	I2C_MEM_END_WDT_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD + 4,
	I2C_MEM_EXTI_EN_ADD = I2C_MEM_END_WDT_ADD,

	I2C_MEM_REVISION_HW_MAJOR_ADD = 251,
	I2C_MEM_REVISION_HW_MINOR_ADD,
	I2C_MEM_REVISION_MAJOR_ADD,
	I2C_MEM_REVISION_MINOR_ADD,
	SLAVE_BUFF_SIZE,
};
//I2C_MEM_ADD;

void dataInit(void);

#define OK 0
#define ERROR -1
#define FAIL -1
#define ARG_CNT_ERR -2
#define ARG_RANGE_ERROR -3
#define IO_ERROR -4

#define STR_(x) #x
#define STR(x) STR_(x)
#define MASK_1 1
#define MASK_2 3
#define MASK_3 7
#define MASK_4 15
#define MASK_5 31
#define MASK_6 63
#define MASK_7 127
#define MASK_8 255
#define MASK_9 511
#define MASK_10 1023
#define MASK_11 2047
#define MASK_12 4095
#define MASK_13 8191
#define MASK_14 16383
#define MASK_15 32767
#define MASK_16 65535
#define MASK_(x) MASK_##x
#define MASK(x) MASK_(x)

typedef enum {
	OFF,
	ON,
	STATE_COUNT,
} State;

#endif /* DATA_H_ */
